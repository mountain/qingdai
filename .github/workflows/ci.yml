name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  pytest:
    name: pytest (${{ matrix.os }}, py${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest ]
        python-version: [ '3.11', '3.12', '3.13' ]

    env:
      # Fallbacks; tests also set these via conftest.py
      MPLBACKEND: Agg
      QD_AUTOSAVE_ENABLE: "0"
      QD_AUTOSAVE_LOAD: "0"
      QD_USE_OCEAN: "0"
      QD_ECO_ENABLE: "0"
      QD_PHYTO_ENABLE: "0"
      QD_HYDRO_ENABLE: "0"
      QD_HYDRO_NETCDF: ""
      QD_PLOT_EVERY_DAYS: "1000000"
      QD_USE_JAX: "0"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Install tooling explicitly to avoid installing the package (pyproject may require 3.13+)
          pip install pytest black ruff mypy

      - name: Lint (ruff)
        run: |
          ruff version
          # Lint OO skeleton, numerics (DBA), and tests
          ruff check --output-format=github pygcm/world pygcm/numerics tests

      - name: Format check (black)
        run: |
          black --version
          # Format check for OO skeleton, numerics (DBA), and tests
          black --check pygcm/world pygcm/numerics tests

      - name: Type check (mypy)
        run: |
          mypy --version
          # Type-check OO skeleton, numerics (DBA), and tests
          mypy pygcm/world pygcm/numerics tests

      - name: Run tests
        run: |
          pytest -q
